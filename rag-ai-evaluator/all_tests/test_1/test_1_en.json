{
  "test_id": "test_001_en",
  "query": "What are the main features of Angular Signals in version 17?",
  "endpoint": "reader_explore",
  "user": {
    "tier": "elevate",
    "language": "en"
  },
  "prompt": "main",
  "actual_response": "gpt-4.1-mini keyword: Angular Signals 17 16 15 features\nAngular Signals in version 17 introduce a new reactive primitive designed to improve change detection and state management in Angular applications. The main features and changes related to Angular Signals in version 17 are:\n\nStabilization of Signals: Signals, introduced as a developer preview in Angular 16, are now stable in Angular 17. They provide a new, signal-based change detection mechanism that enables 'local change detection,' meaning only components with changed signal values are checked, improving performance compared to the traditional full component graph checks or OnPush strategy.\n\nImmutable Data Structure Usage: The previous ability to mutate signals using signal.mutate() has been removed due to causing inconsistencies. Signals must now be treated as immutable data structures. Updates to signals should be done using methods like signal.set() or signal.update(), which replace the entire value immutably.\n\nNew Component Lifecycle Hooks: Angular 17 adds two new lifecycle hooks related to signals: afterRender() and afterNextRender(). These hooks can be used as callback functions executed after Angular renders a component, with afterNextRender() called once after the next render and afterRender() called after every render while the component is active.\n\nImproved Change Detection Efficiency: Signals enable a more fine-grained change detection process that only checks components with changed signal values, reducing unnecessary checks and improving application performance.\n\nIntegration with New Control Flow Syntax: Signals work alongside Angular 17's new built-in control flow syntax (e.g., @if, @for, @switch), which simplifies template logic and supports deferred loading and lazy loading features.\n\nRemoval of Signal Mutation and Router API Changes: Besides signals, Angular 17 removes certain router properties from the public API, requiring configuration through new methods. This is part of broader breaking changes accompanying the signals stabilization.\n\nBetter Support for Zone.js Optionality: Signals are a key enabler for making Zone.js optional in Angular applications, allowing developers to implement more controlled and fine-grained change detection without relying on Zone.js.\n\nUsage Example: Signals are created with an initial value and can be updated immutably. For example, adding an item to a signal containing an array changes from mutating the array (items.mutate(...)) in Angular 16 to updating immutably (items.update(itemsArray => [...itemsArray, newItem])) in Angular 17.\n\n\nIn summary, Angular Signals in version 17 represent a significant step towards a more efficient, reactive, and modern Angular framework by stabilizing signals, enforcing immutability, introducing new lifecycle hooks, and enabling more performant change detection mechanisms. These changes are part of the broader 'Angular Renaissance' aimed at simplifying Angular development and improving performance and developer experience.\nde0df53930e2e1e582caf57fSignals An important detail in Angular 17 is that the signals introduced in Angular 16 are now stable. The goal of introducing Signals was to make zone.js optional by introducing a new, signal-based change detection mechanism. In Angular 17, the team has come a step closer to this goal. Signals enable 'local change detection', a change detection process that only refers to the components that have changed (signal) values. ... One important change is that they are now designed to be used with immutable data structures by default. This makes it easier for Angular to track changes to data managed by signals. The set method, which assigns a new value, or the update method, which maps the existing value to a new one, can be used to update Signals. The mutate method has been removed, because it doesn’t match the semantics of immutables. ... The two hooks are called 'afterRender()' and 'afterNextRender()' and are executed, according to their name, after Angular renders the respective component. The difference between the two hooks is that 'afterNextRender()' is only called once, after the next rendering process, while 'afterRender()' remains active as long as the component is active. However, these two hooks are still listed as 'Developer Preview' and are subject to change.\n04721391f3f7580f0631b9d3Das Angular 17 Release in Stichpunkten ... Ein Breaking Change betrifft das mit Angular 16 eingeführte Feature der Signals. ... Bei den Signals hat es sich gezeigt, dass die signal.mutate()-Funktion zu Inkonsistenzen in der Anwendung führen kann. Daher wurde diese Möglichkeit, ein Signal zu ändern, entfernt. Signals sollten nun nicht mehr per Mutation verändert werden, sondern stattdessen immer wie eine Immutable-Datenstruktur verwendet werden. ... Neben den Signals gibt es Breaking Changes im Router. ... Neue Anwendungen initialisieren den Angular Router standardmäßig und erzeugen Anwendungen als 'standalone' ohne '@NgModule()'s. ... Einführung der neuen Syntax @switch, @case, und @default für Conditional Rendering und neue Direktiven wie @defer für Lazy Loading.\n69a73aaa7784b829b85889baAngular 17 adds to the Angular Renaissance in fall 2023 with a new syntax for the control flow, delayed page loading, improved SSR support, and the CLI now relies on esbuild, significantly speeding up the build. ... Signals, which were introduced in version 16 as a developer preview, are now stable. One important change is that they are now designed to be used with immutable data structures by default. This makes it easier for Angular to track changes to data managed by signals. The set method, which assigns a new value, or the update method, which maps the existing value to a new one, can be used to update Signals. The mutate method has been removed, because it doesn’t match the semantics of immutables. ... The router now supports the View Transitions API. ... The Angular CLI generates standalone components, directives and pipes by default.",
  "discovery_data": {
    "query_sent": "What are the main features of Angular Signals in version 17?",
    "results": [
      {
        "_id": "de0df53930e2e1e582caf57f",
        "title": "Angular 17: The Web Framework's Newest Release",
        "parentGenre": null
      },
      {
        "_id": "04721391f3f7580f0631b9d3",
        "title": "Angular 17: Neues Release des Web-Frameworks",
        "parentGenre": null
      },
      {
        "_id": "64ace3828d8056484c3534ab",
        "title": "Angular 16 released",
        "parentGenre": null
      },
      {
        "_id": "eba6f5d083b14f4d8d53d87a",
        "title": "Was ist neu in Angular 16? Signals, Hydration, esbuild und mehr",
        "parentGenre": null
      },
      {
        "_id": "8b35e3d0070110b78d6c9434",
        "title": "Angular: Signals, Standalone, SSR",
        "parentGenre": null
      },
      {
        "_id": "d0a30c39b6f199c25af1b450",
        "title": "Extensions und Typisierung mit dem NgRx Signal Store",
        "parentGenre": null
      },
      {
        "_id": "5229d453d1393d2c3d86e145",
        "title": "Signals und State Management",
        "parentGenre": null
      },
      {
        "_id": "ZM7Cxztnyh7J9Psky",
        "title": "Signals, Standalone, SSR: So bauen Sie Angular-Apps der Zukunft",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "85CC7npzPgB2pD7n8",
        "title": "Workshop: Modern Angular Architecture & Development",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "1c2d0d1ddbcc6e6469e58943",
        "title": "Angular 19: Incremental Hydration, Hybrid Rendering und Signals",
        "parentGenre": null
      },
      {
        "_id": "5ecf87915aa99dfe10bb64dd",
        "title": "Is Angular 16 Starting a (R)evolution?",
        "parentGenre": null
      },
      {
        "_id": "01a63ca630515849aaa314b1",
        "title": "Angular Signals: Neue Features für die reaktive Entwicklung",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "69a73aaa7784b829b85889ba",
        "title": "What's New in Angular 17?",
        "parentGenre": null
      },
      {
        "_id": "68fe3d9fc389515d1d6bea43",
        "title": "Professional Tips for Using Signals in Angular",
        "parentGenre": "COURSE"
      },
      {
        "_id": "7169f2b6391a0d9490ef4b35",
        "title": "Angular Turns 18 - Grown Up But Dynamic",
        "parentGenre": null
      },
      {
        "_id": "62f599587e3fd28de76c2756",
        "title": "Signals werden erwachsen – das neue Resource API in Angular 19",
        "parentGenre": null
      },
      {
        "_id": "2e2495f42751c019986f5bc4",
        "title": "Java 16: Das JDK auf dem Weg zur nächsten LTS-Version",
        "parentGenre": null
      },
      {
        "_id": "bb97d9e8205e4d23e8d34081",
        "title": "Angular 15: New Features and Breaking Changes",
        "parentGenre": null
      },
      {
        "_id": "3caa038a2f16278ab3c6040a",
        "title": "Angular 18 – erwachsen, aber aktiv",
        "parentGenre": null
      },
      {
        "_id": "yAbsp37cqFzqBuBjc",
        "title": "Lektion 4: Angular auf dem neuesten Stand: Standalone Components, Signals und mehr | verfügbar bis 30.06.2024",
        "parentGenre": "FLEX_CAMP"
      },
      {
        "_id": "qREnL94qsTwnQH8ic",
        "title": "Angular Signals: Gamechanger für reaktive Entwicklung",
        "parentGenre": "COURSE"
      },
      {
        "_id": "14620783c9eb2579c9dbabc3",
        "title": "3 Effective Rules for Successfully Using Signals in Angular",
        "parentGenre": "COURSE"
      },
      {
        "_id": "a980d2604065cad105b1bfaa",
        "title": "Sweet 16",
        "parentGenre": null
      },
      {
        "_id": "9836770500f149a58b7769f9",
        "title": "Professional Tips for Using Signals in Angular",
        "parentGenre": null
      },
      {
        "_id": "11e1079277948f18298e5d3d",
        "title": "Angular: Signals, Standalone, SSR",
        "parentGenre": null
      },
      {
        "_id": "f1151315d5ffa6c7887a8812",
        "title": "Renaissance? Angular 17!",
        "parentGenre": null
      },
      {
        "_id": "8af2ec5feddfa18305ac7346",
        "title": "Angular Turns 18 - Grown Up But Dynamic",
        "parentGenre": null
      },
      {
        "_id": "kynatXxTGKucptx8Y",
        "title": "Signals – A New Way of Fine-Grained Reactivity in Angular",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "popnffuzCL87EDLDe",
        "title": "Modern Angular Workshop",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "heHyAodHSRfj6AG3L",
        "title": "The Internal Magic of Angular Signals",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "1fed2c6361980d606789e315",
        "title": "Manfred Steyer on Angular 20: Signals, Dynamic Components, AI, and What’s Next",
        "parentGenre": null
      },
      {
        "_id": "mrkFPBdm5bQQ8Q8nY",
        "title": "Renovate your Angular App!",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "02070cc000851438e194a2d5",
        "title": "Was ist neu in Angular 16? Signals, Hydration, esbuild und mehr",
        "parentGenre": null
      },
      {
        "_id": "Fi7nHMkvDW6nLD9RY",
        "title": "The Internal Magic of Angular Signals",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "59c6dfa238c69ebd748cc7dc",
        "title": "Angular Signals: Neue Features für die reaktive Entwicklung",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "T4wRpTJiJaFf87NTc",
        "title": "Signals under the hood",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "d93198ee7197abce047d0dc1",
        "title": "Signals und State Management",
        "parentGenre": null
      },
      {
        "_id": "a46f583e86ab963aed1784a1",
        "title": "Master Angular Signals in your existing Codebase",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "120a745f594d13ec42ee3554",
        "title": "Manfred Steyer on Angular 20: Signals, Dynamic Components, AI, and What’s Next",
        "parentGenre": null
      },
      {
        "_id": "hiwmMJy6F5TyrrZFY",
        "title": "Angular Signals: Gamechanger für reaktive Entwicklung",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "E8GpqxYcngd3MofGq",
        "title": "Angular Signals: Gamechanger für reaktive Entwicklung",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "3b7z34h7s3WeDnbvg",
        "title": "Angular Signals: Gamechanger für reaktive Entwicklung",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "73a55b4bbeecf374b233deaf",
        "title": "Angular’s New Era: Unveiling the Most Exciting Features Yet",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "HqpniQZ9AAFMiK6x3",
        "title": "Punktgenaue Aktualisierung",
        "parentGenre": "COURSE"
      },
      {
        "_id": "c57d9896250397cf05488cad",
        "title": "Modern Angular is easier than React",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "NTmSSkWAxtsw9CNHH",
        "title": "Angular Architectures with Signals",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "eaadd69b577fdb10e53c43bd",
        "title": "Was ist neu in Angular 17?",
        "parentGenre": null
      },
      {
        "_id": "b21082003fe4420e7a4cf973",
        "title": "Was ist neu in Angular 17?",
        "parentGenre": null
      },
      {
        "_id": "4279dda65c66e8a1c92875f3",
        "title": "Entwicklung einer Template-Engine",
        "parentGenre": null
      },
      {
        "_id": "18e1984b93f7b81b65afb3ad",
        "title": "Rethinking Angular: The Future with Signals and the New Resource API",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "a13ea87d4ede7d406292dee7",
        "title": "Entwicklung einer Template-Engine",
        "parentGenre": null
      },
      {
        "_id": "512a90d78ae4c994f74f3493",
        "title": "Punktgenaue Aktualisierung",
        "parentGenre": null
      },
      {
        "_id": "54f0c577196e8b38d9c2cc69",
        "title": "Punktgenaue Aktualisierung",
        "parentGenre": null
      },
      {
        "_id": "rmZ66ugQrLDThdwtr",
        "title": "Brand new Redux State Management",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "787b05fae93f992824034695",
        "title": "3 Effective Rules for Successfully Using Signals in Angular",
        "parentGenre": "RHEINGOLD"
      },
      {
        "_id": "bd2918fe362ada7129c4ae2c",
        "title": "Signal-basierte Komponentenkommunikation in Angular 17.1 und 17.2",
        "parentGenre": null
      },
      {
        "_id": "5e49c9ce169d4e147dbc6a14",
        "title": "Signal-basierte Komponentenkommunikation in Angular 17.1 und 17.2",
        "parentGenre": null
      }
    ]
  },
  "evaluation_criteria": {
    "test_focus": "Version-Specific Chunk Selection and Content Analysis",
    "required_checks": [
      "Discovery data must include chunks relevant to Angular Signals and/or Angular version 17 (titles can mention either Angular Signals OR version 17 OR both)",
      "AI response must mention Angular Signals and version 17 explicitly in the main content",
      "Response content must be accurate and match information available in the selected chunks",
      "The status of Angular Signals in v17 must be accurate (e.g., stable, new features, breaking changes)"
    ]
  }
}